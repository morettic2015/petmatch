{
  "_args": [
    [
      {
        "raw": "https://github.com/Telerik-Verified-Plugins/Google-Sign-In",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/Telerik-Verified-Plugins/Google-Sign-In",
        "spec": "git+https://github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:Telerik-Verified-Plugins/Google-Sign-In.git",
          "sshUrl": "git+ssh://git@github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
          "httpsUrl": "git+https://github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
          "gitUrl": "git://github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
          "shortcut": "github:Telerik-Verified-Plugins/Google-Sign-In",
          "directUrl": "https://raw.githubusercontent.com/Telerik-Verified-Plugins/Google-Sign-In/master/package.json"
        }
      },
      "c:\\tmp\\petmatch2.0\\petm\\node_modules"
    ]
  ],
  "_from": "git+https://github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
  "_id": "cordova-plugin-googleplus@5.1.0",
  "_inCache": true,
  "_location": "/cordova-plugin-googleplus",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/Telerik-Verified-Plugins/Google-Sign-In",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/Telerik-Verified-Plugins/Google-Sign-In",
    "spec": "git+https://github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:Telerik-Verified-Plugins/Google-Sign-In.git",
      "sshUrl": "git+ssh://git@github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
      "httpsUrl": "git+https://github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
      "gitUrl": "git://github.com/Telerik-Verified-Plugins/Google-Sign-In.git",
      "shortcut": "github:Telerik-Verified-Plugins/Google-Sign-In",
      "directUrl": "https://raw.githubusercontent.com/Telerik-Verified-Plugins/Google-Sign-In/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/Telerik-Verified-Plugins/Google-Sign-In.git#23c63cff51d9b651dcf1072647c1fbca3a0219e2",
  "_shasum": "c6b010bccf8841d44e4b7c010bbd4c98646b225d",
  "_shrinkwrap": null,
  "_spec": "https://github.com/Telerik-Verified-Plugins/Google-Sign-In",
  "_where": "c:\\tmp\\petmatch2.0\\petm\\node_modules",
  "cordova_name": "Google SignIn",
  "dependencies": {},
  "description": "Use your Google account to authenticate with the app.",
  "devDependencies": {},
  "engines": [
    {
      "name": "cordova",
      "version": ">=3.5.0"
    }
  ],
  "gitHead": "23c63cff51d9b651dcf1072647c1fbca3a0219e2",
  "issue": "https://github.com/EddyVerbruggen/cordova-plugin-googleplus/issues",
  "keywords": [
    "Google",
    "Google SignIn",
    "Google Sign In",
    "GoogleSignIn",
    "Google Login",
    "Google Plus",
    "Login",
    "OAuth",
    "Identity",
    "Authentication",
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios"
  ],
  "license": "MIT",
  "name": "cordova-plugin-googleplus",
  "optionalDependencies": {},
  "platforms": [
    "android",
    "ios"
  ],
  "readme": "# Google Sign-In Cordova/PhoneGap Plugin\r\nby [Eddy Verbruggen](http://twitter.com/eddyverbruggen),\r\nwith great assistance from Sam Muggleworth ([PointSource, LLC](https://github.com/PointSource))\r\n\r\n## 0. Index\r\n\r\n1. [Description](#1-description)\r\n2. [Screenshots](#2-screenshots)\r\n3. [Google API setup](#3-google-api-setup)\r\n4. [Installation (CLI / Plugman)](#4-installation-phonegap-cli--cordova-cli)\r\n5. [Installation (PhoneGap Build)](#5-installation-phonegap-build)\r\n6. [Usage](#6-usage)\r\n7. [Exchanging the `idToken`](#7-exchanging-the-idtoken)\r\n8. [Exchanging the `serverAuthCode`](#8-exchanging-the-serverauthcode)\r\n9. [Troubleshooting](#9-troubleshooting)\r\n10. [Changelog](#10-changelog)\r\n\r\n## 1. Description\r\n\r\nThis plugin allows you to authenticate and identify users with [Google Sign-In](https://developers.google.com/identity/) on [iOS](https://developers.google.com/identity/sign-in/ios/) and [Android](https://developers.google.com/identity/sign-in/android/).\r\nOut of the box, you'll get email, display name, given name, family name, profile picture url, and user id.\r\nYou can also configure it to get an [idToken](#7-exchanging-the-idtoken) and [serverAuthCode](#8-exchanging-the-serverauthcode).\r\n\r\nThis plugin only wraps access to the Google Sign-In API. Further API access should be implemented per use-case, per developer.\r\n\r\n## 2. Screenshots\r\n\r\nAndroid\r\n\r\n<img src=\"https://raw.githubusercontent.com/EddyVerbruggen/cordova-plugin-googleplus/master/screenshots/Android1.png\" width=\"235\" height=\"400\"/>&nbsp;\r\n<img src=\"https://raw.githubusercontent.com/EddyVerbruggen/cordova-plugin-googleplus/master/screenshots/Android2.png\" width=\"235\" height=\"400\"/>&nbsp;\r\n<img src=\"https://raw.githubusercontent.com/EddyVerbruggen/cordova-plugin-googleplus/master/screenshots/Android3.png\" width=\"235\" height=\"400\"/>\r\n\r\n iOS\r\n\r\n<img src=\"https://raw.githubusercontent.com/EddyVerbruggen/cordova-plugin-googleplus/master/screenshots/iOS1.png\" width=\"235\" height=\"417\"/>&nbsp;\r\n<img src=\"https://raw.githubusercontent.com/EddyVerbruggen/cordova-plugin-googleplus/master/screenshots/iOS2.png\" width=\"235\" height=\"417\"/>&nbsp;\r\n<img src=\"https://raw.githubusercontent.com/EddyVerbruggen/cordova-plugin-googleplus/master/screenshots/iOS3.png\" width=\"235\" height=\"417\"/>&nbsp;\r\n\r\n## 3. Google API setup\r\nTo communicate with Google you need to do some tedious setup, sorry.\r\n\r\nIt is (strongly) recommended that you use the same project for both iOS and Android.\r\n\r\n### Before you proceed\r\nGo into your `config.xml` and make sure that your package name (i.e. the app ID) is what you want it to be. Use this package name when setting up iOS and Android in the following steps! If you don't, you will likely get a 12501, 'user cancelled' error despite never cancelling the log in process.\r\n\r\nThis step is _especially_ important if you are using a framework such as Ionic to scaffold out your project. When you create the project, the `config.xml` has a placeholder packagename, e.g. com.ionic.*, so you can start developing right away.\r\n\r\n```xml\r\n<?xml version='1.0' encoding='utf-8'?>\r\n<widget id=\"** REPLACE THIS VALUE **\" ...>\r\n...\r\n</widget>\r\n```\r\n\r\n### iOS\r\nTo get your iOS `REVERSED_CLIENT_ID`, [generate a configuration file here](https://developers.google.com/mobile/add?platform=ios&cntapi=signin).\r\nThis `GoogleService-Info.plist` file contains the `REVERSED_CLIENT_ID` you'll need during installation. _This value is only needed for iOS._\r\n\r\nThe `REVERSED_CLIENT_ID` is also known as the \"iOS URL Scheme\" on the Developer's Console.\r\n\r\nLogin on iOS takes the user to a [SafariViewController](https://developer.apple.com/library/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/) through the Google SDK, instead of the separate Safari browser.\r\n\r\n### Android\r\nTo configure Android, [generate a configuration file here](https://developers.google.com/mobile/add?platform=android&cntapi=signin). Once Google Sign-In is enabled Google will automatically create necessary credentials in Developer Console. There is no need to add the generated google-services.json file into your cordova project.\r\n\r\nMake sure you execute the `keytool` steps as explained [here](https://developers.google.com/android/guides/client-auth) or authentication will fail.\r\n\r\nIMPORTANT:\r\n* The step above, about `keytool`, show 2 types of certificate fingerprints, the **Release** and the **Debug**, when generating the configuration file, it's better to use the **Debug** certificate fingerprint, after that, you have to go on [Google Credentials Manager](https://console.developers.google.com/apis/credentials), and manually create a credential for **OAuth2 client** with your **Release** certificate fingerprint. This is necessary to your application work on both Development and Production releases.\r\n* Ensure that you are using the correct alias name while generating the fingerprint.\r\n```\r\n$ keytool -exportcert -keystore <path-to-debug-or-production-keystore> -list -v -alias <alias-name>\r\n```\r\nLogin on Android will use the accounts signed in on the user's device.\r\n\r\n### Web Client Id\r\n\r\nIf you want to get an `idToken` or `serverAuthCode` back from the Sign In Process, you will need to pass the client ID for your project's web application. This can be found on your project's API credentials page on the [Google Developer's Console](https://console.developers.google.com/).\r\n\r\n## 4. Installation (PhoneGap CLI / Cordova CLI)\r\nThis plugin is compatible with:\r\n* [Cordova Plugman](https://github.com/apache/cordova-plugman)\r\n* [PhoneGap 3.0 CLI](http://docs.phonegap.com/en/3.0.0/guide_cli_index.md.html#The%20Command-line%20Interface_add_features)\r\n* [Ionic](http://ionic.io/) ***(must use the Cordova CLI)***\r\n\r\nHere's how it works (backup your project first!):\r\n\r\nUsing the Cordova CLI and [npm](https://www.npmjs.com/package/cordova-plugin-googleplus):\r\n```\r\n$ cordova plugin add cordova-plugin-googleplus --save --variable REVERSED_CLIENT_ID=myreversedclientid\r\n$ cordova prepare\r\n```\r\n\r\nUsing the Cordova CLI to fetch the latest version from GitHub:\r\n```\r\n$ cordova plugin add https://github.com/EddyVerbruggen/cordova-plugin-googleplus --save --variable REVERSED_CLIENT_ID=myreversedclientid\r\n$ cordova prepare\r\n```\r\n\r\nIMPORTANT:\r\n\r\n* _Please note that `myreversedclientid` is a place holder for the reversed clientId you find in your iOS configuration file. Do not surround this value with quotes. **(iOS only Applications)**_\r\n\r\n* _If you are building a hybrid application **(iOS and Android)**, or an Android application, you have to replace `myreversedclientid` with the reverse value of Client ID in your **Release** credential generated on step 3, on [Google Developer's Console](https://console.developers.google.com/), this will be: **\"com.googleusercontent.apps.`uniqueId`\"**, without quotes._\r\n\r\nGooglePlus.js is brought in automatically. There is no need to change or add anything in your html.\r\n\r\n## 5. Installation (PhoneGap Build)\r\nAdd this to your config.xml:\r\n\r\nFor the NPM Version:\r\n```xml\r\n<gap:plugin name=\"cordova-plugin-googleplus\" source=\"npm\">\r\n  <param name=\"REVERSED_CLIENT_ID\" value=\"myreversedclientid\" />\r\n</gap:plugin>\r\n```\r\n\r\nFor the Git version:\r\n```xml\r\n<gap:plugin spec=\"https://github.com/EddyVerbruggen/cordova-plugin-googleplus.git\" source=\"git\">\r\n    <param name=\"REVERSED_CLIENT_ID\" value=\"myreversedclientid\" />\r\n</gap:plugin>\r\n```\r\n\r\n## 6. Usage\r\nCheck the [demo app](demo) to get you going quickly, or hurt yourself and follow these steps.\r\n\r\nNote that none of these methods should be called before [`deviceready`](https://cordova.apache.org/docs/en/latest/cordova/events/events.deviceready.html) has fired.\r\n\r\nExample:\r\n```javascript\r\ndocument.addEventListener('deviceready', deviceReady, false);\r\n\r\nfunction deviceReady() {\r\n    //I get called when everything's ready for the plugin to be called!\r\n    console.log('Device is ready!');\r\n    window.plugins.googleplus.trySilentLogin(...);\r\n}\r\n```\r\n\r\n### isAvailable\r\n3/31/16: This method is no longer required to be checked first. It is kept for code orthoganality.\r\n\r\n### Login\r\n\r\nThe login function walks the user through the Google Auth process. All parameters are optional, however there are a few caveats.\r\n\r\nTo get an `idToken` on Android, you ***must*** pass in your `webClientId`. On iOS, the `idToken` is included in the sign in result by default.\r\n\r\nTo get a `serverAuthCode`, you must pass in your `webClientId` _and_ set `offline` to true. If offline is true, but no webClientId is provided, the `serverAuthCode` will _**NOT**_ be requested.\r\n\r\nThe default scopes requested are `profile` and `email` (always requested). To request other scopes, add them as a **space-separated list** to the `scopes` parameter. They will be requested exactly as passed in. Refer to the [Google Scopes](https://developers.google.com/identity/protocols/googlescopes) documentation for info on valid scopes that can be requested. For example, `'scope': 'https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/tasks'`.\r\n\r\nNaturally, in order to use any additional scopes or APIs, they will need to be activated in your project Developer's Console.\r\n\r\n##### Usage\r\n```javascript\r\nwindow.plugins.googleplus.login(\r\n    {\r\n      'scopes': '... ', // optional, space-separated list of scopes, If not included or empty, defaults to `profile` and `email`.\r\n      'webClientId': 'client id of the web app/server side', // optional clientId of your Web application from Credentials settings of your project - On Android, this MUST be included to get an idToken. On iOS, it is not required.\r\n      'offline': true, // optional, but requires the webClientId - if set to true the plugin will also return a serverAuthCode, which can be used to grant offline access to a non-Google server\r\n    },\r\n    function (obj) {\r\n      alert(JSON.stringify(obj)); // do something useful instead of alerting\r\n    },\r\n    function (msg) {\r\n      alert('error: ' + msg);\r\n    }\r\n);\r\n```\r\n\r\nThe success callback (second argument) gets a JSON object with the following contents, with example data of my Google account:\r\n```javascript\r\n obj.email          // 'eddyverbruggen@gmail.com'\r\n obj.userId         // user id\r\n obj.displayName    // 'Eddy Verbruggen'\r\n obj.familyName     // 'Verbruggen'\r\n obj.givenName      // 'Eddy'\r\n obj.imageUrl       // 'http://link-to-my-profilepic.google.com'\r\n obj.idToken        // idToken that can be exchanged to verify user identity.\r\n obj.serverAuthCode // Auth code that can be exchanged for an access token and refresh token for offline access\r\n```\r\n\r\nAdditional user information is available by use case. Add the scopes needed to the scopes option then return the info to the result object being created in the `handleSignInResult` and `didSignInForUser` functions on Android and iOS, respectively.\r\n\r\nOn Android, the error callback (third argument) receives an error status code if authentication was not successful. A description of those status codes can be found on Google's android developer website at [GoogleSignInStatusCodes](https://developers.google.com/android/reference/com/google/android/gms/auth/api/signin/GoogleSignInStatusCodes).\r\n\r\nOn iOS, the error callback will include an [NSError localizedDescription](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSError_Class/).\r\n\r\n### Try silent login\r\nYou can call `trySilentLogin` to check if they're already signed in to the app and sign them in silently if they are.\r\n\r\nIf it succeeds you will get the same object as the `login` function gets,\r\nbut if it fails it will not show the authentication dialog to the user.\r\n\r\nCalling `trySilentLogin` is done the same as `login`, except for the function name.\r\n```javascript\r\nwindow.plugins.googleplus.trySilentLogin(\r\n    {\r\n      'scopes': '... ', // optional - space-separated list of scopes, If not included or empty, defaults to `profile` and `email`.\r\n      'webClientId': 'client id of the web app/server side', // optional - clientId of your Web application from Credentials settings of your project - On Android, this MUST be included to get an idToken. On iOS, it is not required.\r\n      'offline': true, // Optional, but requires the webClientId - if set to true the plugin will also return a serverAuthCode, which can be used to grant offline access to a non-Google server\r\n    },\r\n    function (obj) {\r\n      alert(JSON.stringify(obj)); // do something useful instead of alerting\r\n    },\r\n    function (msg) {\r\n      alert('error: ' + msg);\r\n    }\r\n);\r\n```\r\n\r\nIt is strongly recommended that trySilentLogin is implemented with the same options as login, to avoid any potential complications.\r\n\r\n### logout\r\nThis will clear the OAuth2 token.\r\n``` javascript\r\nwindow.plugins.googleplus.logout(\r\n    function (msg) {\r\n      alert(msg); // do something useful instead of alerting\r\n    }\r\n);\r\n```\r\n\r\n### disconnect\r\nThis will clear the OAuth2 token, forget which account was used to login, and disconnect that account from the app. This will require the user to allow the app access again next time they sign in. Be aware that this effect is not always instantaneous. It can take time to completely disconnect.\r\n``` javascript\r\nwindow.plugins.googleplus.disconnect(\r\n    function (msg) {\r\n      alert(msg); // do something useful instead of alerting\r\n    }\r\n);\r\n```\r\n\r\n## 7. Exchanging the `idToken`\r\n\r\nGoogle Documentation for Authenticating with a Backend Server\r\n- [Web](https://developers.google.com/identity/sign-in/web/backend-auth)\r\n- [Android](https://developers.google.com/identity/sign-in/android/backend-auth)\r\n- [iOS](https://developers.google.com/identity/sign-in/ios/backend-auth)\r\n\r\nAs the above articles mention, the `idToken` can be exchanged for user information to confirm the users identity.\r\n\r\n_Note: Google does not want user identity data sent directly to a server. The idToken is their preferred method to send that data securely and safely, as it must be verified through their servers in order to unpack._\r\n\r\nThis has several uses. On the client-side, it can be a way to get doubly confirm the user identity, or it can be used to get details such as the email host domain. The server-side is where the `idToken` really hits its stride. It is an easy way to confirm the users identity before allowing them access to that servers resources or before exchaning the `serverAuthCode` for an access and refresh token (see the next section).\r\n\r\nIf your server-side only needs identity, and not additional account access, this is a secure and simple way to supply that information.\r\n\r\n## 8. Exchanging the `serverAuthCode`\r\n\r\nGoogle Documentation for Enabling Server-Side Access\r\n- [Web](https://developers.google.com/identity/protocols/OAuth2WebServer#handlingresponse)\r\n- [Android](https://developers.google.com/identity/sign-in/android/offline-access)\r\n- [iOS](https://developers.google.com/identity/sign-in/ios/offline-access)\r\n\r\nAs the above articles mention, the `serverAuthCode` is an item that can be exchanged for an access and refresh token. Unlike the `idToken`, this allows the server-side to have direct access to the users Google account.\r\n\r\nYou have a couple options when it comes to this exchange: you can use the Google REST Apis to get those in the hybrid app itself or you can send the code to your backend server to be exchanged there, using whatever method necessary (Google provides examples for Java, Python, and JS/HTTP).\r\n\r\nAs stated before, this plugin is all about user authentication and identity, so any use of the user's account beyond that needs to be implemented per use case, per application.\r\n\r\n## 9. Troubleshooting\r\n- Q: I can't get authentication to work on Android. And why is there no ANDROID API KEY?\r\n- A: On Android you need to execute the `keytool` steps, see the installation instructions for details.\r\n\r\n- Q: OMG $@#*! the Android build is failing\r\n- A: You need to have _Android Support Repository_ and _Android Support Library_ installed in the Android SDK manager. Make sure you're using a fairly up to date version of those.\r\n\r\n- Q: Why isn't this working on my Android Emulator???\r\n- A: Make sure you are using a Virtual Device running with a **Google APIs target and/or a Google APIs CPU**!\r\n\r\n## 10. Changelog\r\n- 5.0.3: Added the convenience method `getSigningCertificateFingerprint` to retrieve the Android cert fingerprint which is required in the Google Developer Console.\r\n- 5.0.2: Require linking against `SafariServices` and `CoreText` frameworks on iOS as per Google's recommendation. Added `loginHint` on iOS.\r\n- 5.0.0: Android GoogleSignIn SDK (See #193), iOS SDK 4.0.0, iOS compatibility with Facebook authentication plugins, added `familyName` and `givenName`.\r\n- 4.0.8: Fix for Android 6 where it would crash while asking for permission. Thx #166!\r\n- 4.0.7: Re-added a missing framework for iOS. Thx #168!\r\n- 4.0.6: Updated iOS GoogleSignIn SDK to 2.4.0. Thx #153!\r\n- 4.0.5: Fixed a broken import on iOS.\r\n- 4.0.4: Using framework tags again for Android\r\n- 4.0.3: On iOS `isAvailable` always returns try since that should be fine with the new Google Sign-In framework. Re-added imageUrl to the result of Sign-In on iOS.\r\n- 4.0.1: Login on Android would crash the app if `isAvailable` was invoked beforehand.\r\n- 4.0.0: Removed the need for `iosApiKey`, reverted Android to Google playservices framework for wider compatibility, documented scopes feature a bit.\r\n- 3.0.0: Using Google Sign-In for iOS, instead of Google+.\r\n- 1.1.0: Added `isAvailable`, for issue [#37](https://github.com/EddyVerbruggen/cordova-plugin-googleplus/issues/37)\r\n- 1.0.0: Initial version supporting iOS and Android.\r\n",
  "readmeFilename": "README.md",
  "repo": "https://github.com/EddyVerbruggen/cordova-plugin-googleplus.git",
  "version": "5.1.0"
}
